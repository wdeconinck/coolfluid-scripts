#!/usr/bin/env perl

#==========================================================================
# TODO
#==========================================================================
# * user config file for overiding options

#==========================================================================
# Modules
#==========================================================================
use Term::ANSIColor;
use Getopt::Long;
use File::Path;
# use File::Spec;
use File::Copy;
use Switch;
# use Path::Class;

#==========================================================================
# Constants
#==========================================================================
my $ERRORCOLOR="bold red";
my $OKCOLOR="bold green";
my $HEADINGCOLOR = "bold";
my $DEBUGCOLOR = "yellow";
my $WARNCOLOR = "bold yellow";

#==========================================================================
# Global Variables
#==========================================================================

my $home = $ENV{HOME};
my $user = $ENV{USER};
my $arch = get_arch();
my $this_filename = "$home/local/bin/coolfluid";
my $run_dir = "$home/workspace/testcases";
my $coolfluid_executable = "";
my $coolfluid_conf       = "";
my $coolfluid_dir = "$home/workspace/coolfluid";
my $remote_coolfluid_dir = "/home/$user/workspace/coolfluid";
my $testcases_dir = "$home/workspace/testcases";
my $remote_server = "login.scinet.utoronto.ca";
my $port = "2200";
my $config_file = "$home/local/scripts/.coolfluid-configuration";

#==========================================================================
# Actions options
#==========================================================================
my $opt_help          = 0;
my $opt_dryrun       = 0;
my $opt_inter         = 0;


my $dcr = 0;
my $val = 1;

#==========================================================================
# Actions
#==========================================================================
my $act = 0;
my $pri = 1;
my $fnc = 2;
my %actionlist = (              # action   priority    function
    "config"                => ['off', $priority++,  \&config                   ],
    "show-options"          => ['off', $priority++,  \&show_options             ],
    "run"                   => ['off', $priority++,  \&run                      ],
    "edit"                  => ['off', $priority++,  \&edit                     ],
    "clean"                 => ['off', $priority++,  \&clean                    ],
    "results"               => ['off', $priority++,  \&results                  ],
    "plot"                  => ['off', $priority++,  \&plot                     ],
    "compile"               => ['off', $priority++,  \&compile                  ],
    "remotesync"            => ['off', $priority++,  \&remotesync               ],
    "remoteconvergence"     => ['off', $priority++,  \&remoteconvergence        ],
    "inter"                 => ['off', $priority++,  \&open_interactive_file    ],
    "cat"                   => ['off', $priority++,  \&cat                      ],
    "merge"                 => ['off', $priority++,  \&merge                    ],
    "merge-interval"        => ['off', $priority++,  \&merge_interval           ],
    "edit"                  => ['off', $priority++,  \&open_cfcase              ],
    "residual"              => ['off', $priority++,  \&plot_residual            ],
    "upload"                => ['off', $priority++,  \&sync_working_dir         ],
);

#==========================================================================
# Command Line
#==========================================================================

sub parse_commandline() # Parse command line
{
    $opt_help=1 unless GetOptions (
        'help'                  => \$opt_help,
        'np=s'                  => sub { $user_pref{"mpi_np"}[$val] = "$_[1]"; },
        'cfcase=s'              => sub { $user_pref{"cfcase"}[$val] = "$_[1]"; },
        'build=s'               => sub { $user_pref{"build"}[$val] = "$_[1]"; },
        'show-options'          => sub { $actionlist{'show-options'}[$act]='on'; },
        'upload'                => sub { $actionlist{'upload'}[$act]='on'; },
        'run'                   => sub { $actionlist{'run'}[$act]='on'; },
        'config'                => sub { $actionlist{'config'}[$act]='on'; },
        'edit'                  => sub { $actionlist{'edit'}[$act]='on'; },
        'clean'                 => sub { $actionlist{'clean'}[$act]='on'; },
        'results'               => sub { $actionlist{'results'}[$act]='on'; },
        'compile'               => sub { $actionlist{'compile'}[$act]='on'; },
        'plot'                  => sub { $actionlist{'plot'}[$act]='on'; },
        'inter'                 => sub { $actionlist{'inter'}[$act]='on'; },
        'cat'                   => sub { $actionlist{'cat'}[$act]='on'; },
        'merge'                 => sub { $actionlist{'merge'}[$act]='on'; },
        'merge-interval=s'      => sub { $actionlist{'merge-interval'}[$act]='on'; $user_pref{"interval"}[$val] = "$_[1]"; },
        'makeopts=s'            => sub { $user_pref{"makeopts"}[$val] = "\"$_[1]\""; },
        'remotesync'            => sub { $actionlist{'remotesync'}[$act]='on'; },
        'remoteconvergence'     => sub { $actionlist{'remoteconvergence'}[$act]='on'; },
        'residual'              => sub { $actionlist{'residual'}[$act]='on'; },
        'remote'                => sub { $user_pref{"remote"}[$val] = "$_[1]"; },
        'dryrun'                => \$opt_dryrun,
    );
    
    # show help if required
    if ($opt_help != 0)
    {
      print <<ZZZ;
setup-coolfluid : Configures COOLFluiD run
options:
        --np=             Setup number of processors to use
        --cfcase=         Setup the CFcase file location to use
        --build=          Setup the build to use
        --makeopts=       Options for compiling
actions:
        --help            Show this help.
        --show-options    Show all options
        --dryrun          Don't change any configuration
        --run             Run coolfluid-solver with the configurations
        --config          Change configuration permanently
        --edit            Open the CFcase file
        --clean           clean log files from run dir $run_dir
        --results         Open the results dir
        --plot            Plot results with tecplot
        --remotesync      Preplot and synchronize results dir
        --remoteconvergence get en plot convergence
ZZZ
    exit(0);
    }
}

#==========================================================================
# Helper funcions
#==========================================================================

sub my_colored ($$)
{
  return ($opt_nocolor ? shift : colored($_[0], $_[1]));
}

#==========================================================================

sub rm_file ($)
{
  my ($file) = @_;
  unlink($file) || warn "warn: not deleting $file: $!";
}

#==========================================================================

sub get_command_status($)
{
    my ($args)=@_;
    print my_colored("Executing   : $args\n",$OKCOLOR);
    unless ($opt_dryrun) {
        my $status = system($args);
        return $status;
    }
    return 0;
}

#==========================================================================

sub run_command_or_die($)
{
    my ($args)=@_;
    print my_colored("Executing   : $args\n",$OKCOLOR);
    unless ($opt_dryrun) {
        my $status = system($args);
        print my_colored("Exit Status : $status\n",$OKCOLOR);
        die "$args exited with error" unless $status == 0;
    }
}

#==========================================================================

sub run_command($)
{
    my ($args)=@_;
    my $output;
    # print my_colored("Executing : $args",$OKCOLOR);
    my $command = join("",$args,"|");
    my $pid=open READER, $command or die "Can't run the program: $args $!\n";
    while(<READER>){
       $output.=$_;
    }
    close READER;
    # print my_colored($output,$OK_COLOR);
    return $output;
}

#==========================================================================

sub safe_chdir($)
{
    my ($dir)=@_;
    print my_colored("Changing to dir $dir\n",$DEBUGCOLOR);
    chdir($dir) or die "Cannot chdir to $dir ($!)";
}

#==========================================================================

sub safe_copy($$)
{
    my ($orig,$targ)=@_;
    copy ($orig,$targ) or die "Cannot copy $orig to $targ ($!)";
}

#==========================================================================

sub safe_delete($)
{
    unlink("$_") or die "Failed to delete file $_\n";
}

#==========================================================================

sub get_arch() # returns the current architecture
{
    my $args="uname -m";
    my $arch = run_command($args);
    chomp($arch);
    return $arch;
}

#==========================================================================

sub is_mac()
{
    my $args="uname -s";
    my $arch = run_command($args);
    chomp($arch);
    if ($arch =~ Darwin) {
        return 1;
    } else {
        return 0;
    }
}

#==========================================================================

sub print_var($$) # create a recursive dir path
{
    my ($var,$value)=@_;
    print my_colored($var,$OKCOLOR); print " : ";
    print my_colored($value,$DEBUGCOLOR); print "\n";
}

#==========================================================================

sub change_config($$)
{
    my ($var_str,$value)=@_;
    
    open (IN, "+<$config_file") or die ("file $config_file not found\n");

    @file = <IN>;

    seek IN,0,0;

    foreach $file (@file){
    $file =~ s/^\s*$var_str\s*=\s*\".*\"/$var_str = \"$value\"/g;
    print IN $file;
    }
    
    close IN;
    
}


#==========================================================================

sub parse_config_file($) # parse the config file to get the user overiding options
{
    my ($filename)=@_;
    
    if (!(-e $filename))
    { 
        safe_copy("$home/local/scripts/.default-coolfluid-configuration",$filename);
    } 
    
    open CONFIG, "<", $filename or die ("Error opening config file $filename!\n");

    while (<CONFIG>) {
        chomp;                  # no newline
        s/#.*//;                # no comments
        s/^\s+//;               # no leading white
        s/\s+$//;               # no trailing white
        next unless length;     # anything left?
        
        my ($var, $description, $value) = split(/\s*[=|]\s*/, $_, 3);
        $user_pref{$var} = [$description,$value];
    }

    close CONFIG;
}

#==========================================================================

sub show_options() {
    foreach $var (keys %user_pref) {
        print_var($user_pref{$var}[$dcr],$user_pref{$var}[$val]);
    }
}

#==========================================================================

sub pref($)
{
    my ($var) = @_;
    return $user_pref{$var}[$val];
}

#==========================================================================

sub run()
{
        get_executable_from_build();
        safe_chdir(get_results_dir());
        my $command = "$coolfluid_executable --conf $coolfluid_conf --scase ".pref('cfcase');
        if (pref('mpi_np') > 1) {
            $command = "mpirun -np ".pref('mpi_np')." $command";
        }
        run_command_or_die("$command");

}

#==========================================================================

sub config()
{    
    rm_file($config_file);
    open (OUT, ">$config_file") or die ("file $config_file not found\n");

    foreach $var (keys %user_pref) {
        print OUT "$var \| $user_pref{$var}[$dcr] = $user_pref{$var}[$val]\n";
    }
    close OUT;
    print my_colored("Configuration changed in $config_file \n",$HEADINGCOLOR); 
}

#==========================================================================

sub get_executable_from_build()
{
    my $opt_build = pref("build");
    if ($opt_build =~ m/optim/ || $opt_build =~ m/debug/ ) {
        $coolfluid_executable = "$home/workspace/coolfluid/builds/$arch/$opt_build/src/Solver/coolfluid-solver";
        $coolfluid_conf       = "$home/workspace/coolfluid/builds/$arch/$opt_build/src/Solver/coolfluid-solver.xml";
    }
    elsif ($opt_build =~ m/RelWithDebInfo/ || $opt_build =~ m/Debug/) {
        $coolfluid_executable = "$home/workspace/coolfluid/builds/$arch/xcode/src/Solver/$opt_build/coolfluid-solver";
        $coolfluid_conf       = "$home/workspace/coolfluid/builds/$arch/xcode/src/Solver/coolfluid-solver.xml";
    }
    else {
        print my_colored("Could not find build $opt_build \n",$ERRORCOLOR);
    }
}

#==========================================================================

sub open_cfcase()
{
    run_command_or_die("open ".pref("cfcase"));
}

#==========================================================================

sub clean()
{
    if ($opt_clean) {
        safe_chdir($run_dir);
        my $output;
        $output = run_command("rm config*.log *output.log envFile* residual.dat tree.xml");
        print my_colored("run dir cleaned \n",$HEADINGCOLOR);
        print $output;
    }
}

#==========================================================================

sub open_result_dir()
{
    if ($opt_results) {
        my $results_dir = get_results_dir();
        $results_dir = "$coolfluid_dir\/$results_dir";
        # run_command_or_die("open $results_dir");
        run_command("osascript -e 'tell application \"Terminal\" to do script with command \"cd $results_dir; ls *.plt\"'");
    }
}

#==========================================================================

sub sync_working_dir()
{
    $local_dir = get_working_dir();
    $remote_dir = get_remote_working_dir();
    
    run_command_or_die("ssh $remote_server 'mkdir -p $remote_dir'");
    run_command_or_die("rsync -avz --progress $local_dir $remote_server:$remote_dir");
}

#==========================================================================

sub get_parameter_from_cfcase($)
{
    my ($search_parameter)=@_;
    
    my $filename = pref("cfcase");
    my $search_value;
    open (IN, "<$filename") or die ("file $filename not found\n");

        @file = <IN>;

        seek IN,0,0;

        foreach $file (@file){
            if( $file =~ m/^\s*$search_parameter\s*=\s*(.*)$/){
                $search_value = $1;
            }
        }
    close IN;
    
    if ($search_value =~ m/^$/) 
    {
        print my_colored("parameter $search_parameter not found in $filename \n",$ERRORCOLOR);
    }
    return $search_value;
}

#==========================================================================

sub compile()
{        
    if ($opt_build == "optim" || $opt_build == "debug") {
        my $build_dir = "$home/workspace/coolfluid/builds/$arch/$user_pref{'build'}[$val]";
        safe_chdir($build_dir);
        my $output;
        $output = run_command_or_die("make $user_pref{'makeopts'}[$val] -j$user_pref{'mpi_np'}[$val]");
        print my_colored("coolfluid compiled \n",$HEADINGCOLOR);
    }
}

#==========================================================================

sub plot()
{
    if ($opt_plot) {
        my $results_dir = get_results_dir();
        $results_dir = "$coolfluid_dir$results_dir";
        
        my $tecfile_basename = get_parameter_from_cfcase("Simulator.SubSystem.Tecplot.FileName");
        if ($opt_mpi_np >= 1) {
            $tecfile_basename =~ s/\.plt/-P\*\.plt/ 
        }
        my $tecfiles = "$results_dir\/$tecfile_basename &";
        print_var("tecplot: ",$tecfiles);
        # run_command("tec360 $tecfiles");
        safe_chdir($testcases_dir);
        system("tec360 $tecfiles");
        
    }
}

sub open_interactive_file()
{
    if ($opt_inter) {
        my $interactive_file = get_parameter_from_cfcase("Simulator.SubSystem.InteractiveParamReader.FileName");
         
        if ($interactive_file =~ m/^$/) { # empty parameter ==> not found
            print my_colored("No interactive file defined in $opt_cfcase \n",$ERRORCOLOR);
        }
        else { # found
            $interactive_file = "$coolfluid_dir\/$interactive_file";
            run_command("mate $interactive_file");
        }        
    }
}


sub remote_sync()
{
    if($opt_remotesync) {
        
        my $tecfile_basename = get_parameter_from_cfcase("Simulator.SubSystem.Tecplot.FileName");
        my $tecfile_mpi = $tecfile_basename;
        my $tecfile_binary = $tecfile_basename;
        if ($opt_mpi_np >= 1) {
            $tecfile_mpi =~ s/\.plt/-P\*\.plt/; 
        }
        $tecfile_binary =~ s/\.plt/-bin\.plt/;
        
        my $results_dir = get_parameter_from_cfcase("Simulator.Paths.ResultsDir");
        my $remote_results_dir = "$remote_coolfluid_dir\/$results_dir";
        my $local_results_dir = "$coolfluid_dir\/$results_dir";
        
        
        open (MYFILE, '>transformToBinary.pl');
        print MYFILE <<ZZZ;
#!/usr/bin/env perl
use Term::ANSIColor;
#==========================================================================
# Constants
#==========================================================================
my \$ERRORCOLOR="bold red";
my \$OKCOLOR="bold green";
my \$HEADINGCOLOR = "bold";
my \$DEBUGCOLOR = "yellow";
my \$WARNCOLOR = "bold yellow";

#==========================================================================

sub rm_file (\$)
{
  my (\$file) = \@_;
  unlink(\$file) || warn "warn: not deleting \$file: \$!";
}

#==========================================================================

sub safe_chdir(\$)
{
    my (\$dir)=\@_;
    print colored("Changing to dir \$dir\\n",\$DEBUGCOLOR);
    chdir(\$dir) or die "Cannot chdir to \$dir (\$!)";
}

#==========================================================================

sub run_command_or_die(\$)
{
    my (\$args)=\@_;
    print colored("Executing   : \$args\\n",\$OKCOLOR);
    my \$status = system(\$args);
    print colored("Exit Status : \$status\\n",\$OKCOLOR);
    die "\$args exited with error" unless \$status == 0;
}

#==========================================================================

safe_chdir("$remote_results_dir");
print colored("Removing old binary: rm $tecfile_binary \\n",\$DEBUGCOLOR);
rm_file("$tecfile_binary");
print colored("Joining tecplot files \\n",\$DEBUGCOLOR);
run_command_or_die("cat $tecfile_mpi > $tecfile_basename");
print colored("Converting to binary \\n",\$DEBUGCOLOR);
run_command_or_die("preplot $tecfile_basename $tecfile_binary");
ZZZ
close (MYFILE);

        
        if (!($opt_dryrun)) {
            system("scp transformToBinary.pl $remote_server:~\n");
            system("ssh $remote_server 'chmod 755 transformToBinary.pl; ./transformToBinary.pl'\n");
            run_command_or_die("rsync --progress -avz  $remote_server:$remote_results_dir/$tecfile_binary $local_results_dir\n");
            # run_command_or_die("rsync --progress -avze 'ssh -p $port' localhost:~/workspace/testcases/channel_3D_Re400_FVM_LES/results/*.plt $home/workspace/testcases/channel_3D_Re400_FVM_LES/results/");
         
            my $tecfile = "$results_dir\/$tecfile_binary \&";
            print_var("tecplot: ",$tecfile);
            safe_chdir($testcases_dir);
            system("tec360 $tecfile\n");
            # system("tec360 legendview.lay \&");   
        }
   
    }
}

#==========================================================================

sub plot_residual()
{

        my $tecfile_basename = get_parameter_from_cfcase("Simulator.SubSystem.BDF2.SpaceResidualFile");
        my $tecfile_mpi = $tecfile_basename;
        if (pref("mpi_np") >= 1) {
            $tecfile_mpi =~ s/\.plt/-P\*\.plt/; 
        }

        my $local_results_dir = get_results_dir();
        my $remote_results_dir = get_remote_results_dir();
        
        if (pref('remote')) {
            run_command_or_die("rsync --progress -avz  $remote_server:$remote_results_dir\/$tecfile_mpi $local_results_dir\n");        
        }
        
        my $tecfile = "$local_results_dir\/$tecfile_mpi \&";
        print_var("tecplot: ",$tecfile);
        safe_chdir($testcases_dir);
        system("tec360 $tecfile\n");
        

        # if (!($opt_dryrun)) {
        #     run_command_or_die("rsync --progress -avz  $remote_server:$remote_results_dir/$tecfile_mpi $local_results_dir\n");
        #     # run_command_or_die("rsync --progress -avze 'ssh -p $port' localhost:~/workspace/testcases/channel_3D_Re400_FVM_LES/results/*.plt $home/workspace/testcases/channel_3D_Re400_FVM_LES/results/");
        #  
        #     my $tecfile = "$results_dir\/$tecfile_mpi \&";
        #     print_var("tecplot: ",$tecfile);
        #     safe_chdir($testcases_dir);
        #     system("tec360 $tecfile\n");
        #     # system("tec360 legendview.lay \&");   
        # }

}

#==========================================================================

sub submit_job() {
    open (MYFILE, '>submitjob.sh');
    print MYFILE <<ZZZ;
#!/bin/bash
# MOAB/Torque submission script for SciNet GPC (ethernet)
#
#PBS -l nodes=2:ppn=8,walltime=1:00:00
#PBS -N test

# DIRECTORY TO RUN - $PBS_O_WORKDIR is directory job was submitted from
cd $PBS_O_WORKDIR

# EXECUTION COMMAND; -np = nodes*ppn
mpirun -np 16 -hostfile $PBS_NODEFILE ./a.out
ZZZ
close (MYFILE);

}

#==========================================================================

sub get_results_dir() {
    my $results_dir = get_parameter_from_cfcase("Simulator.Paths.ResultsDir");
    $results_dir="$coolfluid_dir$results_dir";
    mkpath($results_dir,1);
    return $results_dir;
}

#==========================================================================

sub get_remote_results_dir() {
    my $results_dir = get_parameter_from_cfcase("Simulator.Paths.ResultsDir");
    $results_dir="$remote_coolfluid_dir$results_dir";
    return $results_dir;
}

#==========================================================================

sub get_working_dir() {
    my $working_dir = get_parameter_from_cfcase("Simulator.Paths.WorkingDir");
    $working_dir="$coolfluid_dir$working_dir";
    return $working_dir;
}

#==========================================================================

sub get_remote_working_dir() {
    my $working_dir = get_parameter_from_cfcase("Simulator.Paths.WorkingDir");
    $working_dir="$remote_coolfluid_dir$working_dir";
    return $working_dir;
}

#==========================================================================

sub cat() 
{
    use Cwd;
    use File::Find;
    
    
    chdir(get_results_dir());
    my $dir = getcwd;
    
    my @files = ();

    my $basename = get_parameter_from_cfcase("Simulator.SubSystem.Tecplot.FileName");
    $basename =~ s/\.plt//;

    my @files = ();

    print "looking for files with basename $basename in $dir\n";
    
    find(sub {push @files, $File::Find::name if(/$basename-P0.*/);} ,"$dir"); #custom subroutine find, parse $dir

    foreach (@files) {
        print "$_";
        my $catname = $_;
        my $globname = $_;
        $globname =~ s/-P0/-P\*/;
        $catname =~ s/-P0//;
        system("cat $globname > $catname");
        system("rm $globname");
    }
}

#==========================================================================

sub merge() 
{
    use Cwd;
    use File::Find;
    
    chdir(get_results_dir());
    my $dir = getcwd;
    
    my $basename = get_parameter_from_cfcase("Simulator.SubSystem.Tecplot.FileName");
    $basename =~ s/\.plt//;
    
    my $merge_time = get_parameter_from_cfcase("Simulator.SubSystem.Tecplot.AppendTime");
    if ($merge_time eq "true") {
        my $catname = "$basename-merged-time.plt";
        my $globname = "$basename-time_*.plt";
        run_command_or_die("cat $globname > $catname");
    }
    
    my $merge_iter = get_parameter_from_cfcase("Simulator.SubSystem.Tecplot.AppendIter");
    if ($merge_iter eq "true") {
        my $catname = "$basename-merged-iter.plt";
        my $globname = "$basename-iter_*.plt";
        run_command_or_die("cat $globname > $catname");
    }
}

#==========================================================================

sub merge_interval() 
{
    use Cwd;
    use File::Find;
    
    chdir(get_results_dir());
    my $dir = getcwd;
    
    my $basename = get_parameter_from_cfcase("Simulator.SubSystem.Tecplot.FileName");
    $basename =~ s/\.plt//;
    
    my @files = (); 
    my %timeHash = ();
    find(\&find_files,"$dir"); #custom subroutine find, parse $dir

    # following gets called recursively for each file in $dir, check $_ to see if you want the file!
    sub find_files()
    {
        if ($_ =~ m/time_([0-9]+)_?([0-9]+)?_?(e?)(-?)([0-9]+)?(.*\.plt)$/) {
            $time = get_time_from_filename($_);
            $timeHash{$time} = $_;

        }
    }
    
    
    # get the selection
    my $interval = pref('interval');
    
    # sort and select timeHash
    my $count = 0;
    foreach $time (sort {$timeHash{$a} cmp $timeHash{$b}} keys %timeHash) {
        if ($count*$interval <= $time && ($count+1)*$interval > $time) {
            push @files , $timeHash{$time};
            $count++;
        }
    }
        
    # Total from which percentage will be calculated
    $cnt = @files;

    $|=1;
    $i=0;

    my $catname = "$basename-merged-time-$interval.plt";
    system("echo '' > $catname\n");
    foreach (@files) {
        # Calculate Percentage
    	$percent = ($i/$cnt)*100;		

        # Print Progress
    	for($k=0;$k<$percent;$k=$k+5)
    	{
    		print "|";						
    	}
    	print " <-- $percent% Complete --> ";

        # Goto the start of the line
    	print "\r";
        system("cat $_ >> $catname\n");
        # system("rm $globname");
        $i++;
    }
    print ">>>>>>>>>>>>---------100% Complete---------<<<<<<<<<<<<\n";
    
    
}

#==========================================================================

sub get_time_from_filename($) 
{
    my ($filename) = @_;
    my $beforedecimal;
    my $afterdecimal;
    my $E;
    my $powersign;
    my $power;

    if ($filename =~ m/time_([0-9]+)_?([0-9]+)?_?(e?)(-?)([0-9]+)?/) {
        $beforedecimal = $1;
        $afterdecimal = $2;
        $E = $3;
        $powersign = $4;
        $power = $5;
    }
    my $number;
    if ($E =~ m/e/i){
        $E = 10;
        if ($powersign =~ m/-/i){
            $powersign = -1;
        } else {
            $powersign = 1;
        }
    } else {
        $E = 1;
        $powersign = 1;
        $power = 1;
    }

    my $len = length($afterdecimal);
    $number = ($beforedecimal+$afterdecimal * 10**(-$len))*$E**($powersign*$power);
}

#==========================================================================

sub setup() 
{
    $user_pref{'cfcase'}[$val]=File::Spec->rel2abs($user_pref{'cfcase'}[$val]);
}

#==========================================================================
# Main execution
#==========================================================================

print "COOLFluiD Setup a run to use with coolfluid-run \n";

parse_config_file($config_file);
parse_commandline();
setup();

# sort the packages to install by priority
my %actionsTodo = ();
foreach $action (keys %actionlist) {
    if ($actionlist{$action}[$act] eq 'on') {
        $actionsTodo{$actionlist{$action}[$pri]} = $action;
    }
}

foreach $p (sort {$a <=> $b} keys %actionsTodo) {
    my $action = $actionsTodo{$p};
    print my_colored("Action: $action\n",$ERRORCOLOR);
    unless ($opt_dryrun)
    {
      $actionlist{$action}[$fnc]->();
    }
}
